apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "9000"
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "jupyterhub.matchLabels" . | nindent 6 }}
  strategy:
    {{- .Values.hub.deploymentStrategy | toYaml | trimSuffix "\n" | nindent 4 }}
  template:
    metadata:
      labels:
        {{- /* Changes here will cause the Deployment to restart the pods. */}}
        {{- include "jupyterhub.matchLabels" . | nindent 8 }}
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
        {{- if .Values.hub.labels }}
        {{- .Values.hub.labels | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      annotations:
        # This lets us autorestart when the secret changes!
        checksum/config-map: {{ include (print .Template.BasePath "/hub/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print .Template.BasePath "/hub/secret.yaml") . | sha256sum }}
        {{- if .Values.hub.annotations }}
        {{- .Values.hub.annotations | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.scheduling.podPriority.enabled }}
      priorityClassName: {{ .Release.Name }}-default-priority
      {{- end }}
      nodeSelector: {{ toJson .Values.hub.nodeSelector }}
      {{- include "jupyterhub.coreAffinity" . | nindent 6 }}
      volumes:
        - name: config
          configMap:
            name: hub-config
        - name: secret
          secret:
            {{- if .Values.hub.existingSecret }}
            secretName: {{ .Values.hub.existingSecret }}
            {{- else }}
            secretName: hub-secret
            {{- end }}
        {{- if .Values.hub.extraVolumes }}
        {{- .Values.hub.extraVolumes | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
        {{- if eq .Values.hub.db.type "sqlite-pvc" }}
        - name: hub-db-dir
          persistentVolumeClaim:
            claimName: hub-db-dir
        {{- end }}
      {{- if .Values.rbac.enabled }}
      serviceAccountName: hub
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.hub.fsGid }}
      {{- if or .Values.hub.imagePullSecret.enabled .Values.hub.image.pullSecrets }}
      imagePullSecrets:
        {{- if .Values.hub.imagePullSecret.enabled }}
        - name: hub-image-credentials
        {{ else }}
        {{- range .Values.hub.image.pullSecrets }}
        - name: {{ . }}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.hub.initContainers }}
      initContainers:
        {{- .Values.hub.initContainers | toYaml | trimSuffix "\n" | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.hub.extraContainers }}
        {{- .Values.hub.extraContainers | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
        - command:
          - jupyterhub-singleuser
          env:
          - name: SLACK_API_URL
            value: {{ .Values.schedulableNotebook.slack.apiURL | quote }}
          - name: SLACK_API_TOKEN
            value: {{ .Values.schedulableNotebook.slack.apiToken | quote }}
          - name: SLACK_CHANNEL
            value: {{ .Values.schedulableNotebook.slack.channel | quote }}
          - name: TZ
            value: {{ .Values.schedulableNotebook.timezone | quote }}
          - name: OPENIDP_USERNAME
            valueFrom:
              secretKeyRef:
                {{- if .Values.hub.existingSecret }}
                name: {{ .Values.hub.existingSecret }}
                {{- else }}
                name: hub-secret
                {{- end }}
                key: openIDP.username
          - name: OPENIDP_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.hub.existingSecret }}
                name: {{ .Values.hub.existingSecret }}
                {{- else }}
                name: hub-secret
                {{- end }}
                key: openIDP.password
          - name: PROMETHEUS_SNAPSHOT_PATH
            value: {{ .Values.schedulableNotebook.prometheus.snapshotPath | quote }}
          - name: GCS_BUCKET
            valueFrom:
              secretKeyRef:
                {{- if .Values.hub.existingSecret }}
                name: {{ .Values.hub.existingSecret }}
                {{- else }}
                name: hub-secret
                {{- end }}
                key: gcs.bucketName
          - name: PROMETHEUS_HOST
            value: {{ .Values.schedulableNotebook.prometheus.host | quote }}
          - name: PROMETHEUS_PORT
            value: {{ .Values.schedulableNotebook.prometheus.port | quote }}
          - name: PROMETHEUS_NAMESPACE
            value: {{ .Values.schedulableNotebook.prometheus.podNamespace | quote }}
          - name: PROMETHEUS_CONTAINER
            value: {{ .Values.schedulableNotebook.prometheus.container | quote}}
          - name: PROMETHEUS_DEPLOYMENT
            value: {{ .Values.schedulableNotebook.prometheus.deployment }}
          - name: JUPYTERHUB_CLIENT_ID
            value: service-schedulable-notebook
          - name: JUPYTERHUB_SERVICE_PREFIX
            value: /services/schedulable-notebook/
          - name: JUPYTERHUB_ADMIN_ACCESS
            value: "True"
          - name: JUPYTERHUB_API_TOKEN
            valueFrom:
              secretKeyRef:
                {{- if .Values.hub.existingSecret }}
                name: {{ .Values.hub.existingSecret }}
                {{- else }}
                name: hub-secret
                {{- end }}
                key: schedulable-notebook.token
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/googleCloudServiceAccount.json
          image: {{ .Values.schedulableNotebook.image.name }}:{{ .Values.schedulableNotebook.image.tag }}
          {{- with .Values.schedulableNotebook.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          name: schedulable-notebook
          volumeMounts:
            - name: secret
              mountPath: /var/secrets
          ports:
          - containerPort: 8888
            protocol: TCP
          resources: {}
        - name: jupyterhub-users-exporter
          image: {{ .Values.usersExporter.image.name }}:{{ .Values.usersExporter.image.tag }}
          {{- with .Values.usersExporter.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          ports:
          - containerPort: 9000
            protocol: TCP
          env:
          - name: JUPYTER_HUB_HOST
            value: proxy-public.{{ .Release.Namespace }}.svc.cluster.local
          - name: JUPYTER_HUB_PORT
            value: '80'
          - name: JUPYTER_HUB_API_TOKEN
            valueFrom:
              secretKeyRef:
                {{- if .Values.hub.existingSecret }}
                name: {{ .Values.hub.existingSecret }}
                {{- else }}
                name: hub-secret
                {{- end }}
                key: users-exporter.token
        - name: hub
          image: {{ .Values.hub.image.name }}:{{ .Values.hub.image.tag }}
          command:
            - jupyterhub
            - --config
            - /etc/jupyterhub/jupyterhub_config.py
            {{- if .Values.debug.enabled }}
            - --debug
            {{- end }}
            {{- /*
            We want to do automatic upgrades for sqlite-pvc by default, but
            allow users to opt out of that if they want. Users using their own
            db need to 'opt in' Go Templates treat nil and "" and false as
            'false', making this code complex. We can probably make this a
            one-liner, but doing combinations of boolean vars in go templates is
            very inelegant & hard to reason about.
            */}}
            {{- $upgradeType := typeOf .Values.hub.db.upgrade }}
            {{- if eq $upgradeType "bool" }}
            {{- /* .Values.hub.db.upgrade has been explicitly set to true or false */}}
            {{- if .Values.hub.db.upgrade }}
            - --upgrade-db
            {{- end }}
            {{- else if eq $upgradeType "<nil>" }}
            {{- /* .Values.hub.db.upgrade is nil */}}
            {{- if eq .Values.hub.db.type "sqlite-pvc" }}
            - --upgrade-db
            {{- end }}
            {{- end }}
          volumeMounts:
            - mountPath: /etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /etc/jupyterhub/cull_idle_servers.py
              subPath: cull_idle_servers.py
              name: config
            - mountPath: /etc/jupyterhub/config/
              name: config
            - mountPath: /etc/jupyterhub/secret/
              name: secret
            {{- if .Values.hub.extraVolumeMounts }}
            {{- .Values.hub.extraVolumeMounts | toYaml | trimSuffix "\n" | nindent 12 }}
            {{- end }}
            {{- if eq .Values.hub.db.type "sqlite-pvc" }}
            - mountPath: /srv/jupyterhub
              name: hub-db-dir
              {{- if .Values.hub.db.pvc.subPath }}
              subPath: {{ .Values.hub.db.pvc.subPath | quote }}
              {{- end }}
            {{- end }}
          resources:
            {{- .Values.hub.resources | toYaml | trimSuffix "\n" | nindent 12 }}
          {{- with .Values.hub.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          securityContext:
            runAsUser: {{ .Values.hub.uid }}
            # Don't allow any process to execute as root inside the container
            allowPrivilegeEscalation: false
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: {{ .Release.Name | quote }}
            - name: GRAFANA_INTERNAL_HOST
              value: {{ .Values.grafana.internalHost }}
            - name: GRAFANA_EXTERNAL_HOST
              value: {{ .Values.grafana.externalHost }}
            - name: GRAFANA_API_KEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.hub.existingSecret }}
                  name: {{ .Values.hub.existingSecret }}
                  {{- else }}
                  name: hub-secret
                  {{- end }}
                  key: grafana.apiKey
            {{- if .Values.hub.cookieSecret }}
            - name: JPY_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  {{- if .Values.hub.existingSecret }}
                  name: {{ .Values.hub.existingSecret }}
                  {{- else }}
                  name: hub-secret
                  {{- end }}
                  key: hub.cookie-secret
            {{- end }}
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  {{- if .Values.hub.existingSecret }}
                  name: {{ .Values.hub.existingSecret }}
                  {{- else }}
                  name: hub-secret
                  {{- end }}
                  key: proxy.token
            {{- if .Values.auth.state.enabled }}
            - name: JUPYTERHUB_CRYPT_KEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.hub.existingSecret }}
                  name: {{ .Values.hub.existingSecret }}
                  {{- else }}
                  name: hub-secret
                  {{- end }}
                  key: auth.state.crypto-key
            {{- end }}
            {{- if .Values.hub.db.password }}
            {{- if eq .Values.hub.db.type "mysql" }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.hub.existingSecret }}
                  name: {{ .Values.hub.existingSecret }}
                  {{- else }}
                  name: hub-secret
                  {{- end }}
                  key: hub.db.password
            {{- else if eq .Values.hub.db.type "postgres" }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.hub.existingSecret }}
                  name: {{ .Values.hub.existingSecret }}
                  {{- else }}
                  name: hub-secret
                  {{- end }}
                  key: hub.db.password
            {{- end }}
            {{- end }}
            {{- if .Values.hub.extraEnv }}
            {{- $extraEnvType := typeOf .Values.hub.extraEnv }}
            {{- /* If we have a list, embed that here directly. This allows for complex configuration from configmap, downward API, etc. */}}
            {{- if eq $extraEnvType "[]interface {}" }}
            {{- .Values.hub.extraEnv | toYaml | trimSuffix "\n" | nindent 12 }}
            {{- else if eq $extraEnvType "map[string]interface {}" }}
            {{- /* If we have a map, treat those as key-value pairs. */}}
            {{- range $key, $value := .Values.hub.extraEnv }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            {{- end }}
          ports:
            - containerPort: 8081
              name: hub
          {{- if .Values.hub.livenessProbe.enabled }}
          # livenessProbe notes:
          # We don't know how long hub database upgrades could take
          # so having a liveness probe could be a bit risky unless we put
          # a initialDelaySeconds value with long enough margin for that
          # to not be an issue. If it is too short, we could end up aborting
          # database upgrades midway or ending up in an infinite restart
          # loop.
          livenessProbe:
            initialDelaySeconds: {{ .Values.hub.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hub.livenessProbe.periodSeconds }}
            httpGet:
              path: {{ .Values.hub.baseUrl | trimSuffix "/" }}/hub/health
              port: hub
          {{- end }}
          {{- if .Values.hub.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.hub.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hub.readinessProbe.periodSeconds }}
            httpGet:
              path: {{ .Values.hub.baseUrl | trimSuffix "/" }}/hub/health
              port: hub
          {{- end }}
